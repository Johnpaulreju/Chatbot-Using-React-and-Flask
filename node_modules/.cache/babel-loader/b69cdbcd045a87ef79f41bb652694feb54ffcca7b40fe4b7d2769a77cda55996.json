{"ast":null,"code":"var _jsxFileName = \"/Users/johnpaulreju/Langrasph/chatbot/src/App.js\",\n  _s = $RefreshSig$();\n// import Sidebar from './components/sidebar';\n// import React, { useState } from 'react';\n// import ReactMarkdown from 'react-markdown';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { faCopy } from '@fortawesome/free-solid-svg-icons';\n\n// function ChatUI() {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState('');\n\n//   const sendMessage = async () => {\n//     if (input.trim() !== '') {\n//       const userMessage = { text: input, sender: 'User' };\n//       setMessages((prev) => [...prev, userMessage]);\n//       setInput('');\n\n//       // Simulate an API call (replace with your backend call)\n//       const response = await fetch('http://127.0.0.1:5000/chat', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ message: input }),\n//       });\n\n//       const data = await response.json();\n//       const assistantMessage = { text: data.response, sender: 'Assistant' };\n//       setMessages((prev) => [...prev, assistantMessage]);\n//     }\n//   };\n\n//   const handleKeyPress = (e) => {\n//     if (e.key === 'Enter') {\n//       sendMessage();\n//     }\n//   };\n//   const copyToClipboard = (text) => {\n//     navigator.clipboard.writeText(text);\n//     alert(\"Copied to clipboard!\");\n//   };\n\n//   return (\n//     <div style={styles.container}>\n//       <Sidebar /> \n\n//       <div style={styles.chatContainer}>\n//         <div style={styles.chatWindow}>\n//           {messages.map((msg, index) => (\n//             <div key={index} style={styles.messageContainer}>\n//               {msg.sender === 'User' ? (\n//                 <div style={styles.userChat}>\n//                   <img src=\"/man.png\" alt=\"User\" style={styles.avatar} />\n//                   <div style={{ ...styles.message, ...styles.userMessage }}>\n//                     {msg.text}\n//                   </div>\n//                 </div>\n//               ) : (\n//                 <div style={styles.assistantChat}>\n//                   <img src=\"/ai-technology.png\" alt=\"Assistant\" style={styles.avatar} />\n//                   <div style={{ ...styles.message, ...styles.assistantMessage }}>\n//                     <ReactMarkdown>{msg.text}</ReactMarkdown>\n//                     <button onClick={() => copyToClipboard(msg.text)} style={styles.copyButton}>\n//                       <FontAwesomeIcon icon={faCopy} />\n//                     </button>\n//                   </div>\n//                 </div>\n//               )}\n//               </div>\n//           ))}\n//         </div>\n//         <div style={styles.inputContainer}>\n//           <input\n//             type=\"text\"\n//             value={input}\n//             onChange={(e) => setInput(e.target.value)}\n//             onKeyPress={handleKeyPress}\n//             style={styles.input}\n//             placeholder=\"Type a message...\"\n//           />\n//           <button onClick={sendMessage} style={styles.sendButton}>\n//             Send\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// const styles = {\n//   container: {\n//     display: 'flex',\n//     height: '100vh',\n//   },\n//   chatContainer: {\n//     display: 'flex',\n//     flexDirection: 'column',\n//     height: '95vh',\n//     justifyContent: 'flex-end',\n//     backgroundColor: '#f1f1f1',\n//     padding: '20px',\n//     flex: 1, // Adjust based on sidebar\n//   },\n//   chatWindow: {\n//     flex: 1,\n//     overflowY: 'auto',\n//     padding: '10px',\n//     backgroundColor: '#fff',\n//     border: '1px solid #ccc',\n//     display: 'flex',\n//     flexDirection: 'column',\n//   },\n//   messageContainer: {\n//     display: 'flex',\n//     alignItems: 'flex-start',\n//     marginBottom: '10px',\n//   },\n//   userChat: {\n//     display: 'flex',\n//     alignItems: 'center',\n//     marginLeft: 'auto',\n//     flexDirection: 'row-reverse',\n//   },\n//   assistantChat: {\n//     display: 'flex',\n//     alignItems: 'center',\n//   },\n//   avatar: {\n//     width: '40px',\n//     height: '40px',\n//     borderRadius: '50%',\n//     marginRight: '10px',\n//   },\n//   message: {\n//     margin: '10px 0',\n//     padding: '10px',\n//     borderRadius: '20px',\n//     maxWidth: '60%',\n//     display: 'inline-block',\n//     wordWrap: 'break-word',\n//     whiteSpace: 'pre-wrap',\n//   },\n//   userMessage: {\n//     backgroundColor: '#007bff',\n//     color: '#fff',\n//     marginLeft: 'auto',\n//     textAlign: 'right',\n//     width: 'fit-content',\n//   },\n//   assistantMessage: {\n//     backgroundColor: '#e1e1e1',\n//     color: '#000',\n//     marginRight: 'auto',\n//     textAlign: 'left',\n//     width: 'fit-content',\n//   },\n//   copyButton: {\n//     background: 'none',\n//     border: 'none',\n//     cursor: 'pointer',\n//     position: 'absolute',\n//     top: '10px',\n//     right: '-30px',\n//   },\n//   inputContainer: {\n//     display: 'flex',\n//     borderTop: '1px solid #ccc',\n//     padding: '10px',\n//     backgroundColor: '#fff',\n//   },\n//   input: {\n//     flex: 1,\n//     padding: '10px',\n//     borderRadius: '5px',\n//     border: '1px solid #ccc',\n//     marginRight: '10px',\n//   },\n//   sendButton: {\n//     padding: '10px 20px',\n//     backgroundColor: '#007bff',\n//     color: '#fff',\n//     border: 'none',\n//     borderRadius: '5px',\n//     cursor: 'pointer',\n//   },\n// };\n\n// export default ChatUI;\n\nimport React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCopy } from '@fortawesome/free-solid-svg-icons';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { dracula } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport Sidebar from './components/sidebar';\n\n// Define a custom render function for ReactMarkdown to format code blocks and other elements\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst renderers = {\n  code: ({\n    language,\n    value\n  }) => {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.codeBlockContainer,\n      children: [/*#__PURE__*/_jsxDEV(SyntaxHighlighter, {\n        language: language,\n        style: dracula,\n        children: value\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 204,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => copyToClipboard(value),\n        style: styles.copyButton,\n        children: /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n          icon: faCopy\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 7\n    }, this);\n  }\n};\nconst copyToClipboard = text => {\n  navigator.clipboard.writeText(text);\n  alert(\"Copied to clipboard!\");\n};\nfunction ChatUI() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const sendMessage = async () => {\n    if (input.trim() !== '') {\n      const userMessage = {\n        text: input,\n        sender: 'User'\n      };\n      setMessages(prev => [...prev, userMessage]);\n      setInput('');\n\n      // Fetch the response from the Flask API\n      const response = await fetch('http://127.0.0.1:5000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      const data = await response.json();\n      const assistantMessage = {\n        text: data.response,\n        sender: 'Assistant'\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      sendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.container,\n    children: [/*#__PURE__*/_jsxDEV(Sidebar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 253,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.chatContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.chatWindow,\n        children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n          style: styles.messageContainer,\n          children: msg.sender === 'User' ? /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.userChat,\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"/man.png\",\n              alt: \"User\",\n              style: styles.avatar\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 261,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                ...styles.message,\n                ...styles.userMessage\n              },\n              children: msg.text\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 262,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 260,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n            style: styles.assistantChat,\n            children: [/*#__PURE__*/_jsxDEV(\"img\", {\n              src: \"/ai-technology.png\",\n              alt: \"Assistant\",\n              style: styles.avatar\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 268,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              style: {\n                ...styles.message,\n                ...styles.assistantMessage\n              },\n              children: /*#__PURE__*/_jsxDEV(ReactMarkdown, {\n                renderers: renderers,\n                children: msg.text\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 270,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 269,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 267,\n            columnNumber: 17\n          }, this)\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 258,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 256,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: styles.inputContainer,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          value: input,\n          onChange: e => setInput(e.target.value),\n          onKeyPress: handleKeyPress,\n          style: styles.input,\n          placeholder: \"Type a message...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 278,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: sendMessage,\n          style: styles.sendButton,\n          children: \"Send\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 286,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 255,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 252,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatUI, \"HDAtGPGcvWga1zf1TBXg51T+tsc=\");\n_c = ChatUI;\nconst styles = {\n  container: {\n    display: 'flex',\n    height: '100vh'\n  },\n  chatContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '95vh',\n    justifyContent: 'flex-end',\n    backgroundColor: '#f1f1f1',\n    padding: '20px',\n    flex: 1 // Adjust based on sidebar\n  },\n  chatWindow: {\n    flex: 1,\n    overflowY: 'auto',\n    padding: '10px',\n    backgroundColor: '#fff',\n    border: '1px solid #ccc',\n    display: 'flex',\n    flexDirection: 'column'\n  },\n  messageContainer: {\n    display: 'flex',\n    alignItems: 'flex-start',\n    marginBottom: '10px'\n  },\n  userChat: {\n    display: 'flex',\n    alignItems: 'center',\n    marginLeft: 'auto',\n    flexDirection: 'row-reverse'\n  },\n  assistantChat: {\n    display: 'flex',\n    alignItems: 'center'\n  },\n  avatar: {\n    width: '40px',\n    height: '40px',\n    borderRadius: '50%',\n    marginRight: '10px'\n  },\n  message: {\n    margin: '10px 0',\n    padding: '10px',\n    borderRadius: '20px',\n    maxWidth: '60%',\n    display: 'inline-block',\n    wordWrap: 'break-word',\n    whiteSpace: 'pre-wrap'\n  },\n  userMessage: {\n    backgroundColor: '#007bff',\n    color: '#fff',\n    marginLeft: 'auto',\n    textAlign: 'right',\n    width: 'fit-content'\n  },\n  assistantMessage: {\n    backgroundColor: '#e1e1e1',\n    color: '#000',\n    marginRight: 'auto',\n    textAlign: 'left',\n    width: 'fit-content',\n    position: 'relative'\n  },\n  codeBlockContainer: {\n    position: 'relative',\n    padding: '10px'\n  },\n  copyButton: {\n    background: 'none',\n    border: 'none',\n    cursor: 'pointer',\n    position: 'absolute',\n    top: '10px',\n    right: '10px'\n  },\n  inputContainer: {\n    display: 'flex',\n    borderTop: '1px solid #ccc',\n    padding: '10px',\n    backgroundColor: '#fff'\n  },\n  input: {\n    flex: 1,\n    padding: '10px',\n    borderRadius: '5px',\n    border: '1px solid #ccc',\n    marginRight: '10px'\n  },\n  sendButton: {\n    padding: '10px 20px',\n    backgroundColor: '#007bff',\n    color: '#fff',\n    border: 'none',\n    borderRadius: '5px',\n    cursor: 'pointer'\n  }\n};\nexport default ChatUI;\nvar _c;\n$RefreshReg$(_c, \"ChatUI\");","map":{"version":3,"names":["React","useState","ReactMarkdown","FontAwesomeIcon","faCopy","Prism","SyntaxHighlighter","dracula","Sidebar","jsxDEV","_jsxDEV","renderers","code","language","value","style","styles","codeBlockContainer","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","copyToClipboard","copyButton","icon","text","navigator","clipboard","writeText","alert","ChatUI","_s","messages","setMessages","input","setInput","sendMessage","trim","userMessage","sender","prev","response","fetch","method","headers","body","JSON","stringify","message","data","json","assistantMessage","handleKeyPress","e","key","container","chatContainer","chatWindow","map","msg","index","messageContainer","userChat","src","alt","avatar","assistantChat","inputContainer","type","onChange","target","onKeyPress","placeholder","sendButton","_c","display","height","flexDirection","justifyContent","backgroundColor","padding","flex","overflowY","border","alignItems","marginBottom","marginLeft","width","borderRadius","marginRight","margin","maxWidth","wordWrap","whiteSpace","color","textAlign","position","background","cursor","top","right","borderTop","$RefreshReg$"],"sources":["/Users/johnpaulreju/Langrasph/chatbot/src/App.js"],"sourcesContent":["\n// import Sidebar from './components/sidebar';\n// import React, { useState } from 'react';\n// import ReactMarkdown from 'react-markdown';\n// import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// import { faCopy } from '@fortawesome/free-solid-svg-icons';\n\n\n// function ChatUI() {\n//   const [messages, setMessages] = useState([]);\n//   const [input, setInput] = useState('');\n\n//   const sendMessage = async () => {\n//     if (input.trim() !== '') {\n//       const userMessage = { text: input, sender: 'User' };\n//       setMessages((prev) => [...prev, userMessage]);\n//       setInput('');\n\n//       // Simulate an API call (replace with your backend call)\n//       const response = await fetch('http://127.0.0.1:5000/chat', {\n//         method: 'POST',\n//         headers: {\n//           'Content-Type': 'application/json',\n//         },\n//         body: JSON.stringify({ message: input }),\n//       });\n\n//       const data = await response.json();\n//       const assistantMessage = { text: data.response, sender: 'Assistant' };\n//       setMessages((prev) => [...prev, assistantMessage]);\n//     }\n//   };\n\n//   const handleKeyPress = (e) => {\n//     if (e.key === 'Enter') {\n//       sendMessage();\n//     }\n//   };\n//   const copyToClipboard = (text) => {\n//     navigator.clipboard.writeText(text);\n//     alert(\"Copied to clipboard!\");\n//   };\n\n//   return (\n//     <div style={styles.container}>\n//       <Sidebar /> \n\n//       <div style={styles.chatContainer}>\n//         <div style={styles.chatWindow}>\n//           {messages.map((msg, index) => (\n//             <div key={index} style={styles.messageContainer}>\n//               {msg.sender === 'User' ? (\n//                 <div style={styles.userChat}>\n//                   <img src=\"/man.png\" alt=\"User\" style={styles.avatar} />\n//                   <div style={{ ...styles.message, ...styles.userMessage }}>\n//                     {msg.text}\n//                   </div>\n//                 </div>\n//               ) : (\n//                 <div style={styles.assistantChat}>\n//                   <img src=\"/ai-technology.png\" alt=\"Assistant\" style={styles.avatar} />\n//                   <div style={{ ...styles.message, ...styles.assistantMessage }}>\n//                     <ReactMarkdown>{msg.text}</ReactMarkdown>\n//                     <button onClick={() => copyToClipboard(msg.text)} style={styles.copyButton}>\n//                       <FontAwesomeIcon icon={faCopy} />\n//                     </button>\n//                   </div>\n//                 </div>\n//               )}\n//               </div>\n//           ))}\n//         </div>\n//         <div style={styles.inputContainer}>\n//           <input\n//             type=\"text\"\n//             value={input}\n//             onChange={(e) => setInput(e.target.value)}\n//             onKeyPress={handleKeyPress}\n//             style={styles.input}\n//             placeholder=\"Type a message...\"\n//           />\n//           <button onClick={sendMessage} style={styles.sendButton}>\n//             Send\n//           </button>\n//         </div>\n//       </div>\n//     </div>\n//   );\n// }\n\n// const styles = {\n//   container: {\n//     display: 'flex',\n//     height: '100vh',\n//   },\n//   chatContainer: {\n//     display: 'flex',\n//     flexDirection: 'column',\n//     height: '95vh',\n//     justifyContent: 'flex-end',\n//     backgroundColor: '#f1f1f1',\n//     padding: '20px',\n//     flex: 1, // Adjust based on sidebar\n//   },\n//   chatWindow: {\n//     flex: 1,\n//     overflowY: 'auto',\n//     padding: '10px',\n//     backgroundColor: '#fff',\n//     border: '1px solid #ccc',\n//     display: 'flex',\n//     flexDirection: 'column',\n//   },\n//   messageContainer: {\n//     display: 'flex',\n//     alignItems: 'flex-start',\n//     marginBottom: '10px',\n//   },\n//   userChat: {\n//     display: 'flex',\n//     alignItems: 'center',\n//     marginLeft: 'auto',\n//     flexDirection: 'row-reverse',\n//   },\n//   assistantChat: {\n//     display: 'flex',\n//     alignItems: 'center',\n//   },\n//   avatar: {\n//     width: '40px',\n//     height: '40px',\n//     borderRadius: '50%',\n//     marginRight: '10px',\n//   },\n//   message: {\n//     margin: '10px 0',\n//     padding: '10px',\n//     borderRadius: '20px',\n//     maxWidth: '60%',\n//     display: 'inline-block',\n//     wordWrap: 'break-word',\n//     whiteSpace: 'pre-wrap',\n//   },\n//   userMessage: {\n//     backgroundColor: '#007bff',\n//     color: '#fff',\n//     marginLeft: 'auto',\n//     textAlign: 'right',\n//     width: 'fit-content',\n//   },\n//   assistantMessage: {\n//     backgroundColor: '#e1e1e1',\n//     color: '#000',\n//     marginRight: 'auto',\n//     textAlign: 'left',\n//     width: 'fit-content',\n//   },\n//   copyButton: {\n//     background: 'none',\n//     border: 'none',\n//     cursor: 'pointer',\n//     position: 'absolute',\n//     top: '10px',\n//     right: '-30px',\n//   },\n//   inputContainer: {\n//     display: 'flex',\n//     borderTop: '1px solid #ccc',\n//     padding: '10px',\n//     backgroundColor: '#fff',\n//   },\n//   input: {\n//     flex: 1,\n//     padding: '10px',\n//     borderRadius: '5px',\n//     border: '1px solid #ccc',\n//     marginRight: '10px',\n//   },\n//   sendButton: {\n//     padding: '10px 20px',\n//     backgroundColor: '#007bff',\n//     color: '#fff',\n//     border: 'none',\n//     borderRadius: '5px',\n//     cursor: 'pointer',\n//   },\n// };\n\n// export default ChatUI;\n\nimport React, { useState } from 'react';\nimport ReactMarkdown from 'react-markdown';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCopy } from '@fortawesome/free-solid-svg-icons';\nimport { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';\nimport { dracula } from 'react-syntax-highlighter/dist/esm/styles/prism';\nimport Sidebar from './components/sidebar';\n\n// Define a custom render function for ReactMarkdown to format code blocks and other elements\nconst renderers = {\n  code: ({ language, value }) => {\n    return (\n      <div style={styles.codeBlockContainer}>\n        <SyntaxHighlighter language={language} style={dracula}>\n          {value}\n        </SyntaxHighlighter>\n        <button onClick={() => copyToClipboard(value)} style={styles.copyButton}>\n          <FontAwesomeIcon icon={faCopy} />\n        </button>\n      </div>\n    );\n  }\n};\n\nconst copyToClipboard = (text) => {\n  navigator.clipboard.writeText(text);\n  alert(\"Copied to clipboard!\");\n};\n\nfunction ChatUI() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  const sendMessage = async () => {\n    if (input.trim() !== '') {\n      const userMessage = { text: input, sender: 'User' };\n      setMessages((prev) => [...prev, userMessage]);\n      setInput('');\n\n      // Fetch the response from the Flask API\n      const response = await fetch('http://127.0.0.1:5000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message: input }),\n      });\n\n      const data = await response.json();\n      const assistantMessage = { text: data.response, sender: 'Assistant' };\n      setMessages((prev) => [...prev, assistantMessage]);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      sendMessage();\n    }\n  };\n\n  return (\n    <div style={styles.container}>\n      <Sidebar /> \n\n      <div style={styles.chatContainer}>\n        <div style={styles.chatWindow}>\n          {messages.map((msg, index) => (\n            <div key={index} style={styles.messageContainer}>\n              {msg.sender === 'User' ? (\n                <div style={styles.userChat}>\n                  <img src=\"/man.png\" alt=\"User\" style={styles.avatar} />\n                  <div style={{ ...styles.message, ...styles.userMessage }}>\n                    {msg.text}\n                  </div>\n                </div>\n              ) : (\n                <div style={styles.assistantChat}>\n                  <img src=\"/ai-technology.png\" alt=\"Assistant\" style={styles.avatar} />\n                  <div style={{ ...styles.message, ...styles.assistantMessage }}>\n                    <ReactMarkdown renderers={renderers}>{msg.text}</ReactMarkdown>\n                  </div>\n                </div>\n              )}\n            </div>\n          ))}\n        </div>\n        <div style={styles.inputContainer}>\n          <input\n            type=\"text\"\n            value={input}\n            onChange={(e) => setInput(e.target.value)}\n            onKeyPress={handleKeyPress}\n            style={styles.input}\n            placeholder=\"Type a message...\"\n          />\n          <button onClick={sendMessage} style={styles.sendButton}>\n            Send\n          </button>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n    height: '100vh',\n  },\n  chatContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '95vh',\n    justifyContent: 'flex-end',\n    backgroundColor: '#f1f1f1',\n    padding: '20px',\n    flex: 1, // Adjust based on sidebar\n  },\n  chatWindow: {\n    flex: 1,\n    overflowY: 'auto',\n    padding: '10px',\n    backgroundColor: '#fff',\n    border: '1px solid #ccc',\n    display: 'flex',\n    flexDirection: 'column',\n  },\n  messageContainer: {\n    display: 'flex',\n    alignItems: 'flex-start',\n    marginBottom: '10px',\n  },\n  userChat: {\n    display: 'flex',\n    alignItems: 'center',\n    marginLeft: 'auto',\n    flexDirection: 'row-reverse',\n  },\n  assistantChat: {\n    display: 'flex',\n    alignItems: 'center',\n  },\n  avatar: {\n    width: '40px',\n    height: '40px',\n    borderRadius: '50%',\n    marginRight: '10px',\n  },\n  message: {\n    margin: '10px 0',\n    padding: '10px',\n    borderRadius: '20px',\n    maxWidth: '60%',\n    display: 'inline-block',\n    wordWrap: 'break-word',\n    whiteSpace: 'pre-wrap',\n  },\n  userMessage: {\n    backgroundColor: '#007bff',\n    color: '#fff',\n    marginLeft: 'auto',\n    textAlign: 'right',\n    width: 'fit-content',\n  },\n  assistantMessage: {\n    backgroundColor: '#e1e1e1',\n    color: '#000',\n    marginRight: 'auto',\n    textAlign: 'left',\n    width: 'fit-content',\n    position: 'relative',\n  },\n  codeBlockContainer: {\n    position: 'relative',\n    padding: '10px',\n  },\n  copyButton: {\n    background: 'none',\n    border: 'none',\n    cursor: 'pointer',\n    position: 'absolute',\n    top: '10px',\n    right: '10px',\n  },\n  inputContainer: {\n    display: 'flex',\n    borderTop: '1px solid #ccc',\n    padding: '10px',\n    backgroundColor: '#fff',\n  },\n  input: {\n    flex: 1,\n    padding: '10px',\n    borderRadius: '5px',\n    border: '1px solid #ccc',\n    marginRight: '10px',\n  },\n  sendButton: {\n    padding: '10px 20px',\n    backgroundColor: '#007bff',\n    color: '#fff',\n    border: 'none',\n    borderRadius: '5px',\n    cursor: 'pointer',\n  },\n};\n\nexport default ChatUI;\n"],"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}