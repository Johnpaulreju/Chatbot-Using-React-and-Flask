{"ast":null,"code":"var _jsxFileName = \"/Users/johnpaulreju/Langrasph/chatbot/src/App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction ChatUI() {\n  _s();\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n  const sendMessage = async () => {\n    if (input.trim() !== '') {\n      const userMessage = {\n        text: input,\n        sender: 'User'\n      };\n      setMessages(prev => [...prev, userMessage]);\n      setInput('');\n\n      // Simulate an API call (replace with your backend call)\n      const response = await fetch('http://127.0.0.1:5000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          message: input\n        })\n      });\n      const data = await response.json();\n      const assistantMessage = {\n        text: data.response,\n        sender: 'Assistant'\n      };\n      setMessages(prev => [...prev, assistantMessage]);\n    }\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter') {\n      sendMessage();\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: styles.chatContainer,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.chatWindow,\n      children: messages.map((msg, index) => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: msg.sender === 'User' ? {\n          ...styles.message,\n          ...styles.userMessage\n        } : {\n          ...styles.message,\n          ...styles.assistantMessage\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [msg.sender, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 46,\n          columnNumber: 13\n        }, this), \" \", msg.text]\n      }, index, true, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      style: styles.inputContainer,\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"text\",\n        value: input,\n        onChange: e => setInput(e.target.value),\n        onKeyPress: handleKeyPress,\n        style: styles.input,\n        placeholder: \"Type a message...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: sendMessage,\n        style: styles.sendButton,\n        children: \"Send\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 35,\n    columnNumber: 5\n  }, this);\n}\n_s(ChatUI, \"HDAtGPGcvWga1zf1TBXg51T+tsc=\");\n_c = ChatUI;\nconst styles = {\n  chatContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '95vh',\n    justifyContent: 'flex-end',\n    backgroundColor: '#f1f1f1',\n    padding: '20px'\n  },\n  chatWindow: {\n    flex: 1,\n    overflowY: 'auto',\n    padding: '10px',\n    backgroundColor: '#fff',\n    border: '1px solid #ccc'\n  },\n  message: {\n    margin: '10px 0',\n    padding: '10px 20px',\n    borderRadius: '20px',\n    maxWidth: '60%',\n    display: 'inline-block'\n  },\n  userMessage: {\n    backgroundColor: '#007bff',\n    color: '#fff',\n    marginLeft: 'auto',\n    textAlign: 'right'\n  },\n  assistantMessage: {\n    backgroundColor: '#e1e1e1',\n    color: '#000',\n    marginRight: 'auto',\n    textAlign: 'left'\n  },\n  inputContainer: {\n    display: 'flex',\n    borderTop: '1px solid #ccc',\n    padding: '10px',\n    backgroundColor: '#fff'\n  },\n  input: {\n    flex: 1,\n    padding: '10px',\n    borderRadius: '5px',\n    border: '1px solid #ccc',\n    marginRight: '10px'\n  },\n  sendButton: {\n    padding: '10px 20px',\n    backgroundColor: '#007bff',\n    color: '#fff',\n    border: 'none',\n    borderRadius: '5px',\n    cursor: 'pointer'\n  }\n};\nexport default ChatUI;\nvar _c;\n$RefreshReg$(_c, \"ChatUI\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","ChatUI","_s","messages","setMessages","input","setInput","sendMessage","trim","userMessage","text","sender","prev","response","fetch","method","headers","body","JSON","stringify","message","data","json","assistantMessage","handleKeyPress","e","key","style","styles","chatContainer","children","chatWindow","map","msg","index","fileName","_jsxFileName","lineNumber","columnNumber","inputContainer","type","value","onChange","target","onKeyPress","placeholder","onClick","sendButton","_c","display","flexDirection","height","justifyContent","backgroundColor","padding","flex","overflowY","border","margin","borderRadius","maxWidth","color","marginLeft","textAlign","marginRight","borderTop","cursor","$RefreshReg$"],"sources":["/Users/johnpaulreju/Langrasph/chatbot/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\n\nfunction ChatUI() {\n  const [messages, setMessages] = useState([]);\n  const [input, setInput] = useState('');\n\n  const sendMessage = async () => {\n    if (input.trim() !== '') {\n      const userMessage = { text: input, sender: 'User' };\n      setMessages((prev) => [...prev, userMessage]);\n      setInput('');\n\n      // Simulate an API call (replace with your backend call)\n      const response = await fetch('http://127.0.0.1:5000/chat', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify({ message: input }),\n      });\n\n      const data = await response.json();\n      const assistantMessage = { text: data.response, sender: 'Assistant' };\n      setMessages((prev) => [...prev, assistantMessage]);\n    }\n  };\n\n  const handleKeyPress = (e) => {\n    if (e.key === 'Enter') {\n      sendMessage();\n    }\n  };\n\n  return (\n    <div style={styles.chatContainer}>\n      <div style={styles.chatWindow}>\n        {messages.map((msg, index) => (\n          <div\n            key={index}\n            style={\n              msg.sender === 'User'\n                ? { ...styles.message, ...styles.userMessage }\n                : { ...styles.message, ...styles.assistantMessage }\n            }\n          >\n            <strong>{msg.sender}:</strong> {msg.text}\n          </div>\n        ))}\n      </div>\n      <div style={styles.inputContainer}>\n        <input\n          type=\"text\"\n          value={input}\n          onChange={(e) => setInput(e.target.value)}\n          onKeyPress={handleKeyPress}\n          style={styles.input}\n          placeholder=\"Type a message...\"\n        />\n        <button onClick={sendMessage} style={styles.sendButton}>\n          Send\n        </button>\n      </div>\n    </div>\n  );\n}\n\nconst styles = {\n  chatContainer: {\n    display: 'flex',\n    flexDirection: 'column',\n    height: '95vh',\n    justifyContent: 'flex-end',\n    backgroundColor: '#f1f1f1',\n    padding: '20px',\n  },\n  chatWindow: {\n    flex: 1,\n    overflowY: 'auto',\n    padding: '10px',\n    backgroundColor: '#fff',\n    border: '1px solid #ccc',\n  },\n  message: {\n    margin: '10px 0',\n    padding: '10px 20px',\n    borderRadius: '20px',\n    maxWidth: '60%',\n    display: 'inline-block',\n  },\n  userMessage: {\n    backgroundColor: '#007bff',\n    color: '#fff',\n    marginLeft: 'auto',\n    textAlign: 'right',\n  },\n  assistantMessage: {\n    backgroundColor: '#e1e1e1',\n    color: '#000',\n    marginRight: 'auto',\n    textAlign: 'left',\n  },\n  inputContainer: {\n    display: 'flex',\n    borderTop: '1px solid #ccc',\n    padding: '10px',\n    backgroundColor: '#fff',\n  },\n  input: {\n    flex: 1,\n    padding: '10px',\n    borderRadius: '5px',\n    border: '1px solid #ccc',\n    marginRight: '10px',\n  },\n  sendButton: {\n    padding: '10px 20px',\n    backgroundColor: '#007bff',\n    color: '#fff',\n    border: 'none',\n    borderRadius: '5px',\n    cursor: 'pointer',\n  },\n};\n\nexport default ChatUI;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}